{"version":3,"sources":["components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/TodoFilter/TodoFilter.jsx","components/TodoApp/TodoApp.jsx","App.js","index.js"],"names":["TodoItem","todo","deleteTodo","toggleTodoComplete","editTodoTitle","useState","isEditing","setEditing","title","newTitle","setNewTitle","key","id","className","completed","onDoubleClick","type","checked","onChange","editable","onClick","value","event","target","onKeyDown","TodoList","todos","map","defaultProps","TodoFilter","filterChange","handleClick","filter","href","TodoApp","setTitle","setTodos","activeFilter","setActiveFilter","filteredTodos","useMemo","switchFilter","addTodo","newtitle","newTodo","Date","console","log","onSubmit","preventDefault","placeholder","toggledTodos","some","htmlFor","todoId","prevTodos","selectedTodo","find","selected","length","App","ReactDOM","render","document","getElementById"],"mappings":"2SAGaA,EAAW,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,KAAMC,EAAmD,EAAnDA,WAAYC,EAAuC,EAAvCA,mBAAoBC,EAAmB,EAAnBA,cAAmB,EAClDC,oBAAS,GADyC,mBAC3EC,EAD2E,KAChEC,EADgE,OAElDF,mBAASJ,EAAKO,OAFoC,mBAE3EC,EAF2E,KAEjEC,EAFiE,KA+BlF,OACE,wBACEC,IAAKV,EAAKW,GACVC,UAAS,UAAKZ,EAAKa,UAAY,YAAc,GAApC,mBACPR,EAAY,UAAY,IAC1BS,cA/BkB,WACpBR,GAAW,KAgCT,yBAAKM,UAAU,QACb,2BACEG,KAAK,WACLH,UAAU,SACVI,QAAShB,EAAKa,UACdI,SAhBqB,WAC3Bf,EAAmBF,IAgBbkB,SAAUb,IAEZ,+BAAQL,EAAKO,OACb,4BACEQ,KAAK,SACLH,UAAU,UACVO,QAAS,kBAAMlB,EAAWD,EAAKW,QAGnC,2BACEI,KAAK,OACLH,UAAU,OACVQ,MAAOZ,EACPS,SAhDY,SAACI,GAAW,IACpBD,EAAUC,EAAMC,OAAhBF,MAERX,EAAYW,IA8CRG,UA3CkB,SAACF,GACL,UAAdA,EAAMX,MACRP,EAAcH,EAAMQ,GACpBF,GAAW,IAGK,WAAde,EAAMX,MACRD,EAAYT,EAAKO,OACjBD,GAAW,SCtBJkB,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOxB,EAAV,EAAUA,WAAYC,EAAtB,EAAsBA,mBAAoBC,EAA1C,EAA0CA,cAA1C,OACtB,wBAAIS,UAAU,aACXa,EAAMC,KAAI,SAAA1B,GAAI,OACb,kBAAC,EAAD,CACEA,KAAMA,EACNC,WAAYA,EACZC,mBAAoBA,EACpBuB,MAAOA,EACPtB,cAAeA,SAkBvBqB,EAASG,aAAe,CACtBF,MAAO,IC5BF,IAAMG,EAAa,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACrBC,EAAc,SAACC,GACnBF,EAAaE,IAGf,OACE,wBAAInB,UAAU,WACZ,4BACE,uBACEoB,KAAK,KACLpB,UAAU,GACVO,QAAS,kBAAMW,EAAY,SAH7B,QASF,4BACE,uBACEE,KAAK,WACLpB,UAAU,GACVO,QAAS,kBAAMW,EAAY,YAH7B,WASF,4BACE,uBACEE,KAAK,cACLpB,UAAU,WACVO,QAAS,kBAAMW,EAAY,eAH7B,gBC3BKG,EAAU,WAAO,IAAD,EACD7B,mBAAS,IADR,mBACpBG,EADoB,KACb2B,EADa,OAED9B,mBAAS,IAFR,mBAEpBqB,EAFoB,KAEbU,EAFa,OAGa/B,mBAAS,OAHtB,mBAGpBgC,EAHoB,KAGNC,EAHM,KAuBrBC,EAAgBC,mBAAQ,WAC5B,OAnBmB,SAACR,GAGpB,OAFAM,EAAgBN,GAERA,GACN,IAAK,SACH,OAAON,EAAMM,QAAO,SAAA/B,GAAI,OAAKA,EAAKa,aAEpC,IAAK,YACH,OAAOY,EAAMM,QAAO,SAAA/B,GAAI,OAAIA,EAAKa,aAEnC,IAAK,MACH,OAAOY,GAQJe,CAAaJ,KACnB,IAgEGK,EAAU,SAACC,GACf,GAAiB,KAAbA,EAAiB,CACnB,IAAMC,EAAU,CACdhC,IAAK,IAAIiC,KACTrC,MAAOmC,EACP7B,WAAW,GAGbsB,EAAS,GAAD,mBAAKV,GAAL,CAAYkB,OA+BxB,OAFAE,QAAQC,IAAIrB,GAGV,oCACE,0BAAMsB,SAhDW,SAAC1B,GACpBA,EAAM2B,iBAENP,EAAQlC,GACR2B,EAAS,MA6CL,2BACEnB,KAAK,OACLH,UAAU,WACVqC,YAAY,yBACZ7B,MAAOb,EACPU,SA5DkB,SAACI,GAAW,IAC5BD,EAAUC,EAAMC,OAAhBF,MAERc,EAASd,OA6DP,6BAASR,UAAU,QACjB,2BACEG,KAAK,WACLJ,GAAG,aACHC,UAAU,aACVK,SA7Fe,WACrB,IAAIiC,EAGFA,EADEzB,EAAM0B,MAAK,SAAAnD,GAAI,OAAuB,IAAnBA,EAAKa,aAEtBY,EAAMC,KAAI,SAAA1B,GAAI,kCACXA,GADW,IAEda,WAAW,OAIXY,EAAMC,KAAI,SAAA1B,GAAI,kCACXA,GADW,IAEda,WAAW,OAIjBsB,EAASe,MA8EL,2BAAOE,QAAQ,cAAf,0BAGF,kBAAC,EAAD,CACE3B,MAAOA,EACPxB,WAnDa,SAACoD,GAClBlB,GAAS,SAAAmB,GAAS,OAAIA,EAAUvB,QAC9B,SAAA/B,GAAI,OAAIA,EAAKW,KAAO0C,SAkDlBnD,mBA9CqB,SAACF,GAC1B,IAAMuD,EAAe9B,EAAM+B,MAAK,SAAAC,GAAQ,OAAIzD,EAAKW,KAAO8C,EAAS9C,MAEjE4C,EAAa1C,WAAa0C,EAAa1C,UACvCsB,EAAS,YAAIV,KA2CTtB,cAxCgB,SAACH,EAAMQ,GACNiB,EAAM+B,MAAK,SAAAC,GAAQ,OAAIzD,EAAKW,KAAO8C,EAAS9C,MAEpDJ,MAAQC,KAwCnB,4BAAQI,UAAU,UAChB,0BAAMA,UAAU,cACba,EAAMM,QAAO,SAAA/B,GAAI,OAAKA,EAAKa,aAAW6C,OACtC,IAFH,cAKA,kBAAC,EAAD,CACEjC,MAAOA,EACPI,aA1Ia,WACnB,OAAOS,KA2IH,4BACEvB,KAAK,SACLH,UAAU,kBACVO,QAlDoB,WAC1BgB,GAAS,SAAAmB,GAAS,OAAIA,EAAUvB,QAC9B,SAAA/B,GAAI,OAAuB,IAAnBA,EAAKa,kBA6CX,sBC7JO8C,MAXf,WACE,OACE,6BAAS/C,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCACA,kBAAC,EAAD,SCCRgD,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.6a580053.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = ({ todo, deleteTodo, toggleTodoComplete, editTodoTitle}) => {\n  const [isEditing, setEditing] = useState(false);\n  const [newTitle, setNewTitle] = useState(todo.title);\n  // const [editedTodo, setEditedTodo] = useState(todo);\n\n  const allowEditTodo = () => {\n    setEditing(true);\n  };\n\n  const editTitle = (event) => {\n    const { value } = event.target;\n\n    setNewTitle(value);\n  };\n\n  const handleKeyAction = (event) => {\n    if (event.key === 'Enter') {\n      editTodoTitle(todo, newTitle);\n      setEditing(false);\n    }\n\n    if (event.key === 'Escape') {\n      setNewTitle(todo.title);\n      setEditing(false);\n    }\n  };\n\n  const handleToggleComplete = () => {\n    toggleTodoComplete(todo);\n  };\n\n  return (\n    <li\n      key={todo.id}\n      className={`${todo.completed ? 'completed' : ''}\n      ${isEditing ? 'editing' : ''}`}\n      onDoubleClick={allowEditTodo}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={handleToggleComplete}\n          editable={isEditing}\n        />\n        <label>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={newTitle}\n        onChange={editTitle}\n        onKeyDown={handleKeyAction}\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  toggleTodoComplete: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = ({ todos, deleteTodo, toggleTodoComplete, editTodoTitle }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        todo={todo}\n        deleteTodo={deleteTodo}\n        toggleTodoComplete={toggleTodoComplete}\n        todos={todos}\n        editTodoTitle={editTodoTitle}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ),\n  deleteTodo: PropTypes.func.isRequired,\n  toggleTodoComplete: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoFilter = ({ filterChange }) => {\n  const handleClick = (filter) => {\n    filterChange(filter);\n  };\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className=\"\"\n          onClick={() => handleClick('All')}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className=\"\"\n          onClick={() => handleClick('Active')}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className=\"selected\"\n          onClick={() => handleClick('Completed')}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n\nTodoFilter.propTypes = {\n  filterChange: PropTypes.func.isRequired,\n};\n","import React, { useState, useMemo } from 'react';\nimport { TodoList } from '../TodoList/TodoList';\nimport { TodoFilter } from '../TodoFilter/TodoFilter';\n\nexport const TodoApp = () => {\n  const [title, setTitle] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [activeFilter, setActiveFilter] = useState('All');\n\n  const switchFilter = (filter) => {\n    setActiveFilter(filter);\n\n    switch (filter) {\n      case 'Active':\n        return todos.filter(todo => !todo.completed);\n\n      case 'Completed':\n        return todos.filter(todo => todo.completed);\n\n      case 'All':\n        return todos;\n\n      default:\n        break;\n    }\n  };\n\n  const filteredTodos = useMemo(() => {\n    return switchFilter(activeFilter);\n  }, []);\n\n  const filterChange = () => {\n    return filteredTodos;\n  };\n\n  // const filterChange = (filter) => {\n\n  //   const filteredTodos = () => {\n  //     switch (filter) {\n  //       case 'Active':\n  //         return todos.filter(todo => !todo.completed);\n\n  //       case 'Completed':\n  //         return todos.filter(todo => todo.completed);\n\n  //       case 'All':\n  //         return todos;\n\n  //       default:\n  //         break;\n  //     }\n  //   };\n\n  //   return filteredTodos;\n  // };\n\n  const toggleAllTodos = () => {\n    let toggledTodos;\n\n    if (todos.some(todo => todo.completed === false)) {\n      toggledTodos\n        = todos.map(todo => ({\n          ...todo,\n          completed: true,\n        }));\n    } else {\n      toggledTodos\n        = todos.map(todo => ({\n          ...todo,\n          completed: false,\n        }));\n    }\n\n    setTodos(toggledTodos);\n  };\n\n  // const saveTodos = (filteredTodos) => {\n  //   setTodos(filteredTodos);\n  // };\n\n  const handleInputChange = (event) => {\n    const { value } = event.target;\n\n    setTitle(value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    addTodo(title);\n    setTitle('');\n  };\n\n  const addTodo = (newtitle) => {\n    if (newtitle !== '') {\n      const newTodo = {\n        id: +new Date(),\n        title: newtitle,\n        completed: false,\n      };\n\n      setTodos([...todos, newTodo]);\n    }\n  };\n\n  const deleteTodo = (todoId) => {\n    setTodos(prevTodos => prevTodos.filter(\n      todo => todo.id !== todoId,\n    ));\n  };\n\n  const toggleTodoComplete = (todo) => {\n    const selectedTodo = todos.find(selected => todo.id === selected.id);\n\n    selectedTodo.completed = !selectedTodo.completed;\n    setTodos([...todos]);\n  };\n\n  const editTodoTitle = (todo, newTitle) => {\n    const selectedTodo = todos.find(selected => todo.id === selected.id);\n\n    selectedTodo.title = newTitle;\n  };\n\n  const clearCompletedTodos = () => {\n    setTodos(prevTodos => prevTodos.filter(\n      todo => todo.completed !== true,\n    ));\n  };\n\n  console.log(todos);\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={handleInputChange}\n        />\n      </form>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={toggleAllTodos}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as completed</label>\n      </section>\n\n      <TodoList\n        todos={todos}\n        deleteTodo={deleteTodo}\n        toggleTodoComplete={toggleTodoComplete}\n        editTodoTitle={editTodoTitle}\n      />\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {todos.filter(todo => !todo.completed).length}\n          {' '}\n          items left\n        </span>\n        <TodoFilter\n          todos={todos}\n          filterChange={filterChange}\n        />\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={clearCompletedTodos}\n        >\n          Clear completed\n        </button>\n      </footer>\n    </>\n  );\n};\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp/TodoApp';\n\nfunction App() {\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <TodoApp />\n      </header>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}