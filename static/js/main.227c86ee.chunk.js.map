{"version":3,"sources":["components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/TodoFilter/TodoFilter.jsx","components/TodoApp/TodoApp.jsx","styles/localStorage.js","App.js","index.js"],"names":["TodoItem","todo","deleteTodo","toggleTodoComplete","editTodoTitle","useState","isEditing","setEditing","title","newTitle","setNewTitle","className","completed","onDoubleClick","type","checked","onChange","id","editable","onClick","value","event","target","onKeyDown","key","TodoList","todos","map","defaultProps","TodoFilter","filterChange","selected","setSelected","handleClick","filter","href","TodoApp","setTitle","activeFilter","setActiveFilter","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","warn","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","Error","useLocalStorage","setTodos","filterType","useCallback","filteredTodos","useMemo","addTodo","newtitle","newTodo","Date","onSubmit","preventDefault","placeholder","some","htmlFor","todoId","prevTodos","find","length","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.227c86ee.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = ({\n  todo,\n  deleteTodo,\n  toggleTodoComplete,\n  editTodoTitle,\n}) => {\n  const [isEditing, setEditing] = useState(false);\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  const allowEditTodo = () => {\n    setEditing(true);\n  };\n\n  const editTitle = (event) => {\n    const { value } = event.target;\n\n    setNewTitle(value);\n  };\n\n  const handleKeyAction = (event) => {\n    if (event.key === 'Enter') {\n      editTodoTitle(todo, newTitle);\n      setEditing(false);\n    }\n\n    if (event.key === 'Escape') {\n      setNewTitle(todo.title);\n      setEditing(false);\n    }\n  };\n\n  const handleToggleComplete = () => {\n    toggleTodoComplete(todo.id);\n  };\n\n  return (\n    <li\n      className={`${todo.completed ? 'completed' : ''}\n      ${isEditing ? 'editing' : ''}`}\n      onDoubleClick={allowEditTodo}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={handleToggleComplete}\n          editable={isEditing}\n        />\n        <label>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={newTitle}\n        onChange={editTitle}\n        onKeyDown={handleKeyAction}\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  toggleTodoComplete: PropTypes.func.isRequired,\n  editTodoTitle: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = ({\n  todos,\n  deleteTodo,\n  toggleTodoComplete,\n  editTodoTitle,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        deleteTodo={deleteTodo}\n        toggleTodoComplete={toggleTodoComplete}\n        todos={todos}\n        editTodoTitle={editTodoTitle}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ),\n  deleteTodo: PropTypes.func.isRequired,\n  toggleTodoComplete: PropTypes.func.isRequired,\n  editTodoTitle: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoFilter = ({ filterChange }) => {\n  const [selected, setSelected] = useState(false);\n\n  const handleClick = (filter) => {\n    filterChange(filter);\n    setSelected(true);\n  };\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={`${selected} ? 'selected' : ''`}\n          onClick={() => handleClick('All')}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={`${selected} ? 'selected' : ''`}\n          onClick={() => handleClick('Active')}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={`${selected} ? 'selected' : ''`}\n          onClick={() => handleClick('Completed')}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n\nTodoFilter.propTypes = {\n  filterChange: PropTypes.func.isRequired,\n};\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { TodoList } from '../TodoList/TodoList';\nimport { TodoFilter } from '../TodoFilter/TodoFilter';\nimport { useLocalStorage } from '../../styles/localStorage';\n\nexport const TodoApp = () => {\n  const [title, setTitle] = useState('');\n  const [activeFilter, setActiveFilter] = useState('All');\n  const [todos, setTodos] = useLocalStorage('todos', []);\n\n  const filterType = useCallback((filter) => {\n    switch (filter) {\n      case 'Active':\n        return todos.filter(todo => !todo.completed);\n\n      case 'Completed':\n        return todos.filter(todo => todo.completed);\n\n      case 'All':\n        return todos;\n\n      default:\n        return todos;\n    }\n  }, [todos]);\n\n  const filteredTodos = useMemo(\n    () => filterType(activeFilter),\n    [filterType, activeFilter],\n  );\n\n  const filterChange = (filter) => {\n    setActiveFilter(filter);\n    filterType(filter);\n  };\n\n  const toggleAllTodos = () => {\n    if (todos.some(todo => todo.completed === false)) {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: true,\n      })));\n    } else {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: false,\n      })));\n    }\n  };\n\n  const handleInputChange = (event) => {\n    const { value } = event.target;\n\n    setTitle(value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    addTodo(title);\n    setTitle('');\n  };\n\n  const addTodo = (newtitle) => {\n    if (newtitle !== '') {\n      const newTodo = {\n        id: +new Date(),\n        title: newtitle,\n        completed: false,\n      };\n\n      setTodos([...todos, newTodo]);\n    }\n  };\n\n  const deleteTodo = (todoId) => {\n    setTodos(prevTodos => prevTodos.filter(\n      todo => todo.id !== todoId,\n    ));\n  };\n\n  const toggleTodoComplete = (todoId) => {\n    setTodos(prevTodos => prevTodos.map((todo) => {\n      if (todo.id !== todoId) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        completed: !todo.completed,\n      };\n    }));\n  };\n\n  const editTodoTitle = (todo, newTitle) => {\n    const selectedTodo = todos.find(selected => todo.id === selected.id);\n\n    selectedTodo.title = newTitle;\n  };\n\n  const clearCompletedTodos = () => {\n    setTodos(prevTodos => prevTodos.filter(\n      todo => todo.completed !== true,\n    ));\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={handleInputChange}\n        />\n      </form>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={toggleAllTodos}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as completed</label>\n      </section>\n\n      <TodoList\n        todos={filteredTodos}\n        deleteTodo={deleteTodo}\n        toggleTodoComplete={toggleTodoComplete}\n        editTodoTitle={editTodoTitle}\n      />\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {todos.filter(todo => !todo.completed).length}\n          {' '}\n          items left\n        </span>\n        <TodoFilter\n          todos={todos}\n          filterChange={filterChange}\n        />\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={clearCompletedTodos}\n        >\n          Clear completed\n        </button>\n      </footer>\n    </>\n  );\n};\n","import { useState } from 'react';\n\nexport function useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn(error);\n\n      return initialValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n      const valueToStore\n      = value instanceof Function ? value(storedValue) : value;\n\n      setStoredValue(valueToStore);\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      throw new Error('Error during setting occured');\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp/TodoApp';\n\nfunction App() {\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <TodoApp />\n      </header>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}